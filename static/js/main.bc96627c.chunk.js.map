{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["override","css","App","useState","ip","setIP","getData","a","axios","get","res","console","log","data","useEffect","location","setLocation","getLoc","loc","country","flag","toLowerCase","city","date","Date","className","src","width","height","alt","toLocaleTimeString","loading","size","MapContainer","center","lat","lng","zoom","scrollWheelZoom","TileLayer","attribution","url","Marker","position","icon","Icon","iconUrl","markerIconPng","iconSize","iconAnchor","Popup","WaitForIT","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gWASMA,EAAWC,cAAH,uFAoFCC,MA9Ef,WAEE,MAAoBC,mBAAS,IAA7B,mBAAOC,EAAP,KAAWC,EAAX,KAGMC,EAAO,uCAAG,4BAAAC,EAAA,sEACIC,IAAMC,IAAI,0BADd,OACRC,EADQ,OAEdC,QAAQC,IAAIF,EAAIG,MAChBR,EAAMK,EAAIG,MAHI,2CAAH,qDAMbC,qBAAU,WAERR,MAEC,IAEH,MAAgCH,qBAAhC,mBAAOY,EAAP,KAAiBC,EAAjB,KACMC,EAAM,uCAAG,4BAAAV,EAAA,sEACKC,IAAMC,IAAI,+FAAiGL,GADhH,OACPc,EADO,OAEbP,QAAQC,IAAIM,EAAIL,KAAKE,SAASI,SAE9BH,EAAYE,EAAIL,MAChBF,QAAQC,IAAIG,GALC,2CAAH,qDAONK,EAAI,0CAA+BL,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAUA,SAASI,QAAQE,cAA1D,QACJC,EAAI,OAAGP,QAAH,IAAGA,OAAH,EAAGA,EAAUA,SAASO,KAC5BC,EAAO,IAAIC,KA+Bf,OA9BAV,qBAAU,WAERG,MAEC,IA2BD,sBAAKQ,UAAU,MAAf,UACE,sBAAKA,UAAU,WAAf,UACE,qBACEC,IAAKN,EACLO,MAAM,MACNC,OAAO,MACPC,IAAI,iBACN,oDACA,6BAAKzB,IACL,8DAAiCkB,KACjC,qDAAwBC,EAAKO,2BAE/B,qBAAKL,UAAU,MAAf,SArCJ,WACE,MAAQV,GACN,OACE,sBAAKU,UAAU,gBAAf,UACE,gDACA,cAAC,IAAD,CAAYM,SAAS,EAAM9B,IAAKD,EAAUgC,KAAM,QAKtD,OACE,eAACC,EAAA,EAAD,CAAcC,OAAQ,CAACnB,EAASA,SAASoB,IAAKpB,EAASA,SAASqB,KAAMC,KAAM,GAAIC,iBAAiB,EAAjG,UACE,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAEN,cAACC,EAAA,EAAD,CAAQC,SAAU,CAAC5B,EAASA,SAASoB,IAAKpB,EAASA,SAASqB,KAAMQ,KAAM,IAAIC,OAAK,CAAEC,QAASC,IAAeC,SAAU,CAAC,GAAI,IAAKC,WAAY,CAAC,GAAI,MAAhJ,SACE,eAACC,EAAA,EAAD,mCACuB,uBADvB,gCAqBDC,SC3EMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bc96627c.chunk.js","sourcesContent":["import './App.css';\nimport { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\nimport markerIconPng from \"leaflet/dist/images/marker-icon.png\"\nimport { Icon } from 'leaflet'\nimport { css } from \"@emotion/react\";\nimport SyncLoader from \"react-spinners/SyncLoader\";\n\nconst override = css`\n  display: block;\n  margin: 2;\n  border-color: #61dafb;\n`;\n\nfunction App() {\n  //creating IP state\n  const [ip, setIP] = useState('');\n\n  //creating function to load ip address from the API\n  const getData = async () => {\n    const res = await axios.get('https://api.ipify.org/')\n    console.log(res.data);\n    setIP(res.data)\n  }\n\n  useEffect(() => {\n    //passing getData method to the lifecycle method\n    getData()\n\n  }, [])\n\n  const [location, setLocation] = useState();\n  const getLoc = async () => {\n    const loc = await axios.get('https://geo.ipify.org/api/v2/country,city?apiKey=at_3v49w0Le5WYW22vFmCEtQJHg9WWp7&ipAddress=' + ip)\n    console.log(loc.data.location.country)\n    // setLocation([loc.data.location.lat, loc.data.location.lng])\n    setLocation(loc.data)\n    console.log(location)\n  }\n  const flag = `https://flagcdn.com/w160/${location?.location.country.toLowerCase()}.png`\n  const city = location?.location.city;\n  let date = new Date();\n  useEffect(() => {\n    //passing getData method to the lifecycle method\n    getLoc()\n\n  }, [])\n\n  function WaitForIT() {\n    while (!location) {\n      return (\n        <div className=\"sweet-loading\">\n          <h4>Map is Loading</h4>\n          <SyncLoader loading={true} css={override} size={20} />\n        </div>\n      )\n    }\n\n    return (\n      <MapContainer center={[location.location.lat, location.location.lng]} zoom={13} scrollWheelZoom={false}>\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <Marker position={[location.location.lat, location.location.lng]} icon={new Icon({ iconUrl: markerIconPng, iconSize: [25, 41], iconAnchor: [12, 41] })}>\n          <Popup>\n            A pretty CSS3 popup. <br /> Easily customizable.\n          </Popup>\n        </Marker>\n      </MapContainer>\n    )\n  }\n  return (\n    <div className=\"App\">\n      <div className='userData'>\n        <img\n          src={flag}\n          width=\"160\"\n          height=\"120\"\n          alt=\"South Africa\"></img>\n        <h2>Your IP Address is</h2>\n        <h4>{ip}</h4>\n        <p>You are currently located in {city}</p>\n        <p>your local time is: {date.toLocaleTimeString()}</p> \n      </div>\n      <div className='map'>\n        {WaitForIT()}\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}